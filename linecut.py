


p1 = "457,206,381860741,457,206,381860741,456,208,381860743,457,206,381860741,+456,208,381860743,455,212,381860745,457,206,381860741,456,208,381860743,455,212,381860745,449,237,381860746,457,206,381860741,456,208,381860743,455,212,381860745,449,237,381860746,434,300,381860748,457,206,381860741,456,208,381860743,455,212,381860745,449,237,381860746,434,300,381860748,418,371,381860750,457,206,381860741,456,208,381860743,455,212,381860745,449,237,381860746,434,300,381860748,418,371,381860750,405,432,381860751,457,206,381860741,456,208,381860743,455,212,381860745,449,237,381860746,434,300,381860748,418,371,381860750,405,432,381860751,393,484,381860753,457,206,381860741,456,208,381860743,455,212,381860745,449,237,381860746,434,300,381860748,418,371,381860750,405,432,381860751,393,484,381860753,382,522,381860755,457,206,381860741,456,208,381860743,455,212,381860745,449,237,381860746,434,300,381860748,418,371,381860750,405,432,381860751,393,484,381860753,382,522,381860755,373,544,381860756,457,206,381860741,456,208,381860743,455,212,381860745,449,237,381860746,434,300,381860748,418,371,381860750,405,432,381860751,393,484,381860753,382,522,381860755,373,544,381860756,369,550,381860758,457,206,381860741,456,208,381860743,455,212,381860745,449,237,381860746,434,300,381860748,418,371,381860750,405,432,381860751,393,484,381860753,382,522,381860755,373,544,381860756,369,550,381860758,369,550,381860759,+418,413,381860766,418,413,381860766,420,414,381860770,418,413,381860766,420,414,381860770,423,415,381860772,418,413,381860766,420,414,381860770,423,415,381860772,462,437,381860773,418,413,381860766,420,414,381860770,423,415,381860772,462,437,381860773,506,479,381860775,418,413,381860766,420,414,381860770,423,415,381860772,462,437,381860773,506,479,381860775,527,510,381860777,418,413,381860766,420,414,381860770,423,415,381860772,462,437,381860773,506,479,381860775,527,510,381860777,527,510,381860778,+610,192,381860794,610,192,381860794,611,192,381860798,610,192,381860794,611,192,381860798,620,210,381860800,610,192,381860794,611,192,381860798,620,210,381860800,640,265,381860802,610,192,381860794,611,192,381860798,620,210,381860800,640,265,381860802,658,334,381860803,610,192,381860794,611,192,381860798,620,210,381860800,640,265,381860802,658,334,381860803,672,389,381860805,610,192,381860794,611,192,381860798,620,210,381860800,640,265,381860802,658,334,381860803,672,389,381860805,686,434,381860807,610,192,381860794,611,192,381860798,620,210,381860800,640,265,381860802,658,334,381860803,672,389,381860805,686,434,381860807,702,462,381860808,610,192,381860794,611,192,381860798,620,210,381860800,640,265,381860802,658,334,381860803,672,389,381860805,686,434,381860807,702,462,381860808,702,462,381860810,+776,239,381860825,776,239,381860825,776,239,381860827,776,239,381860825,776,239,381860827,776,239,381860829,776,239,381860825,776,239,381860827,776,239,381860829,777,241,381860830,776,239,381860825,776,239,381860827,776,239,381860829,777,241,381860830,790,273,381860832,776,239,381860825,776,239,381860827,776,239,381860829,777,241,381860830,790,273,381860832,801,328,381860834,776,239,381860825,776,239,381860827,776,239,381860829,777,241,381860830,790,273,381860832,801,328,381860834,801,365,381860835,776,239,381860825,776,239,381860827,776,239,381860829,777,241,381860830,790,273,381860832,801,328,381860834,801,365,381860835,801,399,381860837,776,239,381860825,776,239,381860827,776,239,381860829,777,241,381860830,790,273,381860832,801,328,381860834,801,365,381860835,801,399,381860837,799,409,381860839,776,239,381860825,776,239,381860827,776,239,381860829,777,241,381860830,790,273,381860832,801,328,381860834,801,365,381860835,801,399,381860837,799,409,381860839,799,409,381860839,+717,374,381860851,717,374,381860851,717,374,381860854,717,374,381860851,717,374,381860854,717,372,381860856,717,374,381860851,717,374,381860854,717,372,381860856,725,363,381860857,717,374,381860851,717,374,381860854,717,372,381860856,725,363,381860857,759,341,381860859,717,374,381860851,717,374,381860854,717,372,381860856,725,363,381860857,759,341,381860859,803,339,381860861,717,374,381860851,717,374,381860854,717,372,381860856,725,363,381860857,759,341,381860859,803,339,381860861,803,339,381860861,+739,479,381860874,739,479,381860874,738,479,381860876,739,479,381860874,738,479,381860876,737,479,381860877,739,479,381860874,738,479,381860876,737,479,381860877,738,478,381860879,739,479,381860874,738,479,381860876,737,479,381860877,738,478,381860879,756,463,381860881,739,479,381860874,738,479,381860876,737,479,381860877,738,478,381860879,756,463,381860881,803,443,381860882,739,479,381860874,738,479,381860876,737,479,381860877,738,478,381860879,756,463,381860881,803,443,381860882,817,438,381860884,739,479,381860874,738,479,381860876,737,479,381860877,738,478,381860879,756,463,381860881,803,443,381860882,817,438,381860884,817,438,381860884,+"
p2= "580,206,381866932,579,207,381866935,580,206,381866932,579,207,381866935,578,209,381866937,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,551,264,381866940,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,551,264,381866940,521,311,381866942,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,551,264,381866940,521,311,381866942,495,354,381866943,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,551,264,381866940,521,311,381866942,495,354,381866943,467,399,381866945,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,551,264,381866940,521,311,381866942,495,354,381866943,467,399,381866945,444,441,381866947,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,551,264,381866940,521,311,381866942,495,354,381866943,467,399,381866945,444,441,381866947,429,469,381866949,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,551,264,381866940,521,311,381866942,495,354,381866943,467,399,381866945,444,441,381866947,429,469,381866949,416,494,381866950,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,551,264,381866940,521,311,381866942,495,354,381866943,467,399,381866945,444,441,381866947,429,469,381866949,416,494,381866950,410,508,381866952,580,206,381866932,579,207,381866935,578,209,381866937,571,224,381866938,551,264,381866940,521,311,381866942,495,354,381866943,467,399,381866945,444,441,381866947,429,469,381866949,416,494,381866950,410,508,381866952,410,508,381866952,+492,371,381866962,492,371,381866962,492,372,381866965,492,371,381866962,492,372,381866965,494,374,381866967,492,371,381866962,492,372,381866965,494,374,381866967,508,390,381866968,492,371,381866962,492,372,381866965,494,374,381866967,508,390,381866968,536,426,381866970,492,371,381866962,492,372,381866965,494,374,381866967,508,390,381866968,536,426,381866970,556,463,381866972,492,371,381866962,492,372,381866965,494,374,381866967,508,390,381866968,536,426,381866970,556,463,381866972,568,486,381866973,492,371,381866962,492,372,381866965,494,374,381866967,508,390,381866968,536,426,381866970,556,463,381866972,568,486,381866973,583,504,381866975,492,371,381866962,492,372,381866965,494,374,381866967,508,390,381866968,536,426,381866970,556,463,381866972,568,486,381866973,583,504,381866975,583,504,381866976,+755,223,381866994,755,223,381866994,755,223,381866995,755,223,381866994,755,223,381866995,754,225,381866999,755,223,381866994,755,223,381866995,754,225,381866999,755,244,381867000,755,223,381866994,755,223,381866995,754,225,381866999,755,244,381867000,759,302,381867002,755,223,381866994,755,223,381866995,754,225,381866999,755,244,381867000,759,302,381867002,764,368,381867004,755,223,381866994,755,223,381866995,754,225,381866999,755,244,381867000,759,302,381867002,764,368,381867004,767,421,381867005,755,223,381866994,755,223,381866995,754,225,381866999,755,244,381867000,759,302,381867002,764,368,381867004,767,421,381867005,771,464,381867007,755,223,381866994,755,223,381866995,754,225,381866999,755,244,381867000,759,302,381867002,764,368,381867004,767,421,381867005,771,464,381867007,774,482,381867009,755,223,381866994,755,223,381866995,754,225,381866999,755,244,381867000,759,302,381867002,764,368,381867004,767,421,381867005,771,464,381867007,774,482,381867009,774,482,381867009,+881,244,381867024,881,244,381867024,881,246,381867031,881,244,381867024,881,246,381867031,884,280,381867032,881,244,381867024,881,246,381867031,884,280,381867032,878,339,381867034,881,244,381867024,881,246,381867031,884,280,381867032,878,339,381867034,868,385,381867036,881,244,381867024,881,246,381867031,884,280,381867032,878,339,381867034,868,385,381867036,860,423,381867037,881,244,381867024,881,246,381867031,884,280,381867032,878,339,381867034,868,385,381867036,860,423,381867037,854,457,381867039,881,244,381867024,881,246,381867031,884,280,381867032,878,339,381867034,868,385,381867036,860,423,381867037,854,457,381867039,854,457,381867040,+772,368,381867053,772,368,381867053,771,368,381867056,772,368,381867053,771,368,381867056,770,368,381867058,772,368,381867053,771,368,381867056,770,368,381867058,770,367,381867059,772,368,381867053,771,368,381867056,770,368,381867058,770,367,381867059,771,366,381867061,772,368,381867053,771,368,381867056,770,368,381867058,770,367,381867059,771,366,381867061,784,363,381867063,772,368,381867053,771,368,381867056,770,368,381867058,770,367,381867059,771,366,381867061,784,363,381867063,803,361,381867064,772,368,381867053,771,368,381867056,770,368,381867058,770,367,381867059,771,366,381867061,784,363,381867063,803,361,381867064,820,364,381867066,772,368,381867053,771,368,381867056,770,368,381867058,770,367,381867059,771,366,381867061,784,363,381867063,803,361,381867064,820,364,381867066,835,370,381867068,772,368,381867053,771,368,381867056,770,368,381867058,770,367,381867059,771,366,381867061,784,363,381867063,803,361,381867064,820,364,381867066,835,370,381867068,835,370,381867068,+807,500,381867081,807,500,381867081,806,500,381867083,807,500,381867081,806,500,381867083,806,500,381867084,807,500,381867081,806,500,381867083,806,500,381867084,806,500,381867086,807,500,381867081,806,500,381867083,806,500,381867084,806,500,381867086,807,500,381867088,807,500,381867081,806,500,381867083,806,500,381867084,806,500,381867086,807,500,381867088,831,495,381867090,807,500,381867081,806,500,381867083,806,500,381867084,806,500,381867086,807,500,381867088,831,495,381867090,841,494,381867091,807,500,381867081,806,500,381867083,806,500,381867084,806,500,381867086,807,500,381867088,831,495,381867090,841,494,381867091,841,494,381867091,+"


class Cuting ():

    def input(p1):

        p1_length = p1.count('+')  # 획수
        #p2_length = p2.count('+')


        dic = {'StrX' : 0,'StrY' : 1, 'FirstTime' : 2, 'EndX' : 3, 'EndY' : 4, 'LastTime' : 5} # 0~5까지 획당 스타트포인트 X좌표,스타트포인트 Y좌표,스타트포인트 타임스템프,엔드포인트 X좌표,엔드포인트 Y좌표,엔드포인트 타임스템프로 만듦

        p1_array = [[0 for col in range(len(dic))] for row in range(p1_length)] #2차원 배열로 스타트포인트와 엔드포인트를 획마다 값을 행에 넣기 위한 배열
        #p2_array = [[0 for col in range(len(dic))] for row in range(p2_length + p1_length)]


        for i in range(0, p1_length): #원본 데이터의 획당 스타팅포인트, 엔드포인트, 타임스템프 입력t('+')[i].split(',')[2]

            StrPoint = p1.split('+')[i].split(',')[0] + "," + p1.split('+')[i].split(',')[1] + "," + p1.split('+')[i].split(',')[2]
            LastNum = len(p1.split('+')[i].split(',')) - 2
            EndPoint = p1.split('+')[i].split(',')[LastNum - 2] + "," + p1.split('+')[i].split(',')[LastNum - 1] + "," + p1.split('+')[i].split(',')[LastNum]
            for j in range(0,6):
                if j<3:
                    p1_array[i][j] = StrPoint.split(',')[j]
                else :
                    p1_array[i][j] = EndPoint.split(',')[j - 3]

        '''
        for i in range(0, p2_length): #테스트 데이터의 획당 스타팅포인트, 엔드포인트, 타임스템프 입력

            StrPoint = p2.split('+')[i].split(',')[0] + "," + p2.split('+')[i].split(',')[1] + "," + p2.split('+')[i].split(',')[2]
            LastNum = len(p2.split('+')[i].split(',')) - 2
            EndPoint = p2.split('+')[i].split(',')[LastNum - 2] + "," + p2.split('+')[i].split(',')[LastNum - 1] + "," + p2.split('+')[i].split(',')[LastNum]
            for j in range(0,6):
                if j<3:
                    p2_array[i][j] = StrPoint.split(',')[j]
                else :
                    p2_array[i][j] = EndPoint.split(',')[j - 3]
    
        '''


        return p1_array
#######
    def compare(self,p1,p2):

        p1_array = Cuting.input(p1)
        p2_array = Cuting.input(p2)
        p1_length = len(p1_array)
        p2_length = len(p2_array)

        dic = {'StrX': 0, 'StrY': 1, 'FirstTime': 2, 'EndX': 3, 'EndY': 4, 'LastTime': 5}

        while p1_length != p2_length:# 테스트 데이터의 획수가 많을때

            if(p1_length< p2_length) :

                for i in range(0, p2_length - 1):
                    if abs(int(p2_array[i + 1][dic['FirstTime']]) - int(p2_array[i][dic['LastTime']])) < 6 : # 획수를 합치는 조건 ex) 타임스템프의 차이가 6 이하일때



                        p2_array[i][dic['LastTime']] = p2_array[i + 1][dic['LastTime']]
                        p2_array[i][dic['EndX']] = p2_array[i + 1][dic['EndX']]
                        p2_array[i][dic['EndY']] = p2_array[i + 1][dic['EndY']]

                        for j in range(i + 1, p2_length - 1):
                            for k in range(0, len(dic)):
                                p2_array[j][k] = p2_array[j + 1][k]
                p2_length -= 1 # 맨 밑 남는 배열 길이 없에기

            else:#리얼 데이터의 획수가 많을때

                for i in range(0, p1_length - 1):
                    if abs(int(p1_array[i + 1][dic['FirstTime']]) - int(p1_array[i][dic['LastTime']])) < 6 : # 획수를 합치는 조건 ex) 타임스템프의 차이가 6 이하일때
                        p1 = p1.replace("+", "")[i]

                        p1_array[i][dic['LastTime']] = p1_array[i + 1][dic['LastTime']]
                        p1_array[i][dic['EndX']] = p1_array[i + 1][dic['EndX']]
                        p1_array[i][dic['EndY']] = p1_array[i + 1][dic['EndY']]

                        for j in range(i + 1, p1_length - 1):
                            for k in range(0, len(dic)):
                                p1_array[j][k] = p1_array[j + 1][k]
                p1_length -= 1 # 맨 밑 남는 배열 길이 없에기

##########출력

        for i in range(0, p1.count('+')): # 획 나눠서 출력
            print(p1.split('+')[i])

        print("\n\n")

        for i in range(0, p2.count('+')):  # 획 나눠서 출력
            print(p2.split('+')[i])

        if p1.count('+') > p2.count('+') :
            for i in range(0, p1_length): # 결과값 출력 (획당 스타팅포인트, 엔드 포인트)
                for j in range(0, 6):
                    print(p1_array[i][j], end=' ')
                print()
        else :
            for i in range(0, p2_length): # 결과값 출력 (획당 스타팅포인트, 엔드 포인트)
                for j in range(0, 6):
                    print(p2_array[i][j], end=' ')
                print()

        return 0

Cuting.compare(Cuting,p1,p2)

# 획당 맞추기

# 획당 속도

# 획당 평균거리배열
